// Code generated by wsp, DO NOT EDIT.

package main

import (
	"camp/feed/controller/feed"
	"camp/feed/filter"
	"camp/feed/model/feed"
	"net/http"
	"time"
)

//import "camp/feed/controller/f//"

func init() {
	http.HandleFunc("/feed/add", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(feed.Skel)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/skel/add"}); !ok {
				return
			}
		}()
		c.Add(w, r)
	})

	http.HandleFunc("/feed/add", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(skel.Skel)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/skel/add"}); !ok {
				return
			}
		}()
		c.Add(w, r)
	})

	http.HandleFunc("/feed/del", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(skel.Skel)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/skel/del"}); !ok {
				return
			}
		}()
		c.Del(w, r)
	})

	http.HandleFunc("/feed/get", func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		_ = t
		var e interface{}
		c := new(skel.Skel)
		defer func() {
			e = recover()
			if ok := filter.Boss(w, r, map[string]interface{}{"__T__": t, "__C__": c, "__E__": e, "__P__": "/skel/get"}); !ok {
				return
			}
		}()
		c.Get(w, r)
	})

}
